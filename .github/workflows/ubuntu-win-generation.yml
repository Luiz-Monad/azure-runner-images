# This file was removed from the upstream
# we recreate it based on image-generation.yml

name: image generation
on:
  workflow_call:
    inputs:

      # Parameters

      image_name:
        type: string
        description: Gallery - name of image
        required: true

      image_version:
        type: string
        description: Gallery - version of image
        required: true

      image_type:
        type: string
        description: An OS image to build
        required: true

      image_template_name:
        type: string
        description: Name of the image template to use
        required: true

      image_readme_name:
        type: string
        description: README file path
        required: true

      # CI Parameters

      create_release:
        type: boolean
        default: false

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'Luiz-Monad' }}
    timeout-minutes: 1200
    steps:

      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: Luiz-Monad/azure-runner-images
      # Set variables
      - name: Set variables
        run: |
          $ImageType = "${{ inputs.image_type }}"
          $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "ubuntu/templates" } else { "windows/templates" }
          $TemplateDirectoryPath = Join-Path "images" $TemplateDirectoryName | Resolve-Path

          $TemplateFileName = "${{ inputs.image_template_name }}"
          $TemplatePath = Join-Path $TemplateDirectoryPath $TemplateFileName

          "TemplateDirectoryPath=$TemplateDirectoryPath" | Out-File -Append -FilePath $env:GITHUB_ENV
          "TemplatePath=$TemplatePath" | Out-File -Append -FilePath $env:GITHUB_ENV

          $TempImageName = "${{ inputs.image_type }}-${{ github.run_id }}"
          "TempImageName=$TempImageName" | Out-File -Append -FilePath $env:GITHUB_ENV

          $TempResourceGroupName = "packer-temp-$TempImageName"
          "TempResourceGroupName=$TempResourceGroupName" | Out-File -Append -FilePath $env:GITHUB_ENV

      # Build VM
      - name: Build VM
        run: |
          ./images.CI/linux-and-win/build-image.ps1 `
            -TemplatePath "${{ env.TemplatePath }}" `
            -Location "${{ secrets.AZURE_LOCATION }}" `
            -TenantId "${{ secrets.AZURE_TENANT }}" `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION }}" `
            -ClientId "${{ secrets.CLIENT_ID }}" `
            -ClientSecret "${{ secrets.CLIENT_SECRET }}" `
            -ImageResourceGroupName "${{ secrets.AZURE_RESOURCE_GROUP }}" `
            -ImageGallery "${{ secrets.AZURE_GALLERY }}" `
            -ImageName "${{ inputs.image_name }}" `
            -ImageVersion "${{ inputs.image_version }}" `
            -TempResourceGroupName "${{ env.TempResourceGroupName }}"  `
            -VirtualNetworkRG "${{ secrets.BUILD_AGENT_VNET_RESOURCE_GROUP }}" `
            -VirtualNetworkName "${{ secrets.BUILD_AGENT_VNET_NAME }}" `
            -VirtualNetworkSubnet "${{ secrets.BUILD_AGENT_SUBNET_NAME }}" `
            -NgrokToken "${{ secrets.NGROK_TOKEN }}" `
            -NgrokSSHPubKey "${{ secrets.NGROK_SSH_PUBKEY }}"

        env:
          PACKER_LOG: 1
          PACKER_LOG_PATH: ${{ runner.temp }}/packer-log.txt

      # Output packer log
      - name: Output Packer Log
        run: |
          Get-Content -Path "${{ runner.temp }}/packer-log.txt"

      # Copy artifacts
      - name: Copy image artifacts to the separate directory
        run: |
          $ImageType = "${{ inputs.image_type }}"
          $rootDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "ubuntu" } else { "windows" }
          $rootDirectoryPath = Join-Path "images" $rootDirectoryName | Resolve-Path

          $readmePath = Join-Path $rootDirectoryPath "${{ inputs.image_readme_name }}"
          $softwareReportPath = Join-Path $rootDirectoryPath "software-report.json"

          Copy-Item -Path $readmePath -Destination "${{ runner.temp }}/"
          if (Test-Path $softwareReportPath) {
              Copy-Item -Path $softwareReportPath -Destination "${{ runner.temp }}/"
          }

      # Markdown report
      - name: Print markdown software report
        run: |
          $softwareReportPath = "${{ runner.temp }}/software-report.md"
          if (Test-Path $softwareReportPath) {
              Get-Content -Path $softwareReportPath
          }

      # Json report
      - name: Print json software report
        run: |
          $softwareReportPath = "${{ runner.temp }}/software-report.json"
          if (Test-Path $softwareReportPath) {
              Get-Content -Path $softwareReportPath
          }

      # Publish artifacts
      # TODO: not supported

      # Provisioners duration
      - name: Print provisioners duration
        run: |
          ./images.CI/measure-provisioners-duration.ps1 `
            -PackerLogPath "${{ runner.temp }}/packer-log.txt" `
            -PrefixToPathTrim "${{ env.TemplateDirectoryPath }}" `
            -PrintTopNLongest 25

      # VM deployment
      - if: ${{ inputs.create_release }}
        name: Create release for VM deployment
        run: |
          $BuildId = "${{ github.run_id }}" % [System.UInt32]::MaxValue
          ./images.CI/linux-and-win/create-release.ps1 `
            -BuildId $BuildId `
            -Organization "${{ secrets.RELEASE_TARGET_ORGANIZATION }}" `
            -DefinitionId "${{ secrets.RELEASE_TARGET_DEFINITION_ID }}" `
            -Project "${{ secrets.RELEASE_TARGET_PROJECT }}" `
            -ImageType "${{ inputs.image_type }}" `
            -ImageName "${{ inputs.image_name }}" `
            -AccessToken "${{ secrets.RELEASE_TARGET_TOKEN }}"

      # Cleanup
      - name: Clean up resources
        if: ${{ always() }}
        run: |
          ./images.CI/linux-and-win/cleanup.ps1 `
            -TenantId "${{ secrets.AZURE_TENANT }}" `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION }}" `
            -ClientId "${{ secrets.CLIENT_ID }}" `
            -ClientSecret "${{ secrets.CLIENT_SECRET }}" `
            -TempResourceGroupName "${{ env.TempResourceGroupName }}"
